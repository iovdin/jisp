; Command line utility
  ; Launches interactive REPL
  ; Compiles files
; Mostly copied from CoffeeScript source, bow to Jeremy and team, todo rewrite

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Dependencies ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(= fs           (require "fs")
   path         (require "path")
   mkdirp       (require "mkdirp")
   spawn        (require "child_process").spawn
   exec         (require "child_process").exec
   EventEmitter (require "events").EventEmitter
   jisp         (require "./jisp")
   utils        (require "./utils")
   optparse     (require "./optparse"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Rest ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Putting more than one backslash directly before a quote breaks our tokeniser, todo fix
(= useWinPathSep (is path.sep ("\\ ".slice 0 1)))

; Allow jisp to emit Node.js events
(utils.extend jisp (new EventEmitter))

(def printLine line
     (process.stdout.write (+ line "\n")))

(def printWarn line
     (process.stderr.write (+ line "\n")))

(def hidden file (/^\.|~$/.test file))

; Startup help banner
(= banner "
Usage: jisp [options] path/to/script.jisp -- [args]

When called without options, compiles your script and prints the output to stdout.")

; List of valid options
(= switches `(
  ("-c" "--compile"      "compile to JavaScript and save as .js files")
  ("-o" "--output [dir]" "set the output directory for compiled JavaScript")
  ("-i" "--interactive"  "run an interactive jisp REPL (this is the default with no options and arguments)")
  ("-v" "--version"      "display the version number")
))

; Global objects
(= opts         (:)
   sources      `()
   sourceCode   `()
   notSources   (:)
   optionParser null)

; Run `jisp` by parsing passed options and branching on actions
(= exports.run (def run
  (do (parseOptions)
      ; Make the REPL CLI use the global context
      (= replCliOpts   (useGlobal: yes))
      (if opts.version (return (version)))
      (if (or opts.interactive (not opts.arguments.length))
          (return ((require "./repl").start replCliOpts)))
      (= literals         (if opts.run (opts.arguments.splice 1) `())
         process.argv     ((process.argv.slice 0 1).concat literals)
         process.argv[0] 'jisp')
      (if opts.output (= opts.output (path.resolve opts.output)))
      (for source opts.arguments
           (do (= source (path.resolve source))
               (compilePath source yes source))))))

; Compiles a path, which could be a script or directory. If a directory is passed, recursively compile all '.jisp' files and subdirectories
(def compilePath source topLevel base
  (do (if (or (in source sources)
              (and (not topLevel)
                   (or notSources[source] (hidden source))))
          (return))
      (try (= stats (fs.statSync source))
           (catch err (do (if (is err.code "ENOENT")
                              (do (console.error (+ "File not found:" source))
                                  (process.exit 1)))
                          (throw err))))
      (if (stats.isDirectory)
          (if (is (path.basename source) "node_modules")
              (= notSources[source] yes)
              (elif opts.run
                    (compilePath (findDirectoryIndex source) topLevel base))
              (do (try (= files (fs.readdirSync source))
                       (catch err (if (is err.code "ENOENT")
                                      (return)
                                      (throw err))))
                  (for file files
                       (compilePath (path.join source file) no base))))
          (elif (or topLevel (utils.isJisp source))
                (do (sources.push source)
                    (sourceCode.push null)
                    (delete notSources[source])
                    (try (= code (fs.readFileSync source))
                         (catch err (if (is err.code "ENOENT")
                                        return
                                        (throw err))))
                    (compileScript source (code.toString) base)))
          (= notSources[source] yes))))

(def findDirectoryIndex source
     (do (for ext jisp.fileExtensions
              (do (= index (path.join source (+ "index" ext)))
                  (try (if ((fs.statSync index).isFile) (return index))
                       (catch err (if (not (is err.code "ENOENT"))
                                      (throw err))))))
         (console.error (+ "Missing index.jisp in " source))
         (process.exit 1)))


; Compiles a single source script
; By default saves into the same directory, changing extension to .js
(def compileScript file input (base null)
  (do (= o       opts
         options (compileOptions file base))
      (try
        (do (= t (= task (file: file input: input options: options)))
            (jisp.emit "compile" task)
            (if o.run
                (do (jisp.register)
                    (jisp.run t.input t.options))
                (do (= compiled (jisp.compile t.input)
                       t.output compiled)
                    (jisp.emit "success" task)
                    (if o.compile
                        (writeJs base t.file t.output options.jsPath)
                        (printLine (t.output.trim))))))
        (catch err
          (do (jisp.emit "failure" err task)
              (if (jisp.listeners "failure").length (return))
              (= message (or err.stack (err.toString)))
              (printWarn message)
              (process.exit 1))))))

; Attach listeners to compile scripts incoming over stdin and write back to stdout
(def compileStdin
     (do (= code  ""
            stdin (process.openStdin))
         (stdin.on "data" (fn buffer
           (if buffer (+= code (buffer.toString)))))
         (stdin.on "end" (fn (compileScript null code)))))

; If all source files are done being read, concat and compile them together
(= joinTimeout null
   compileJoin (fn
     (if (not (sourceCode.some (fn code (is code null))))
         (do (clearTimeout joinTimeout)
             (= joinTimeout (wait 100 (fn
                 (compileScript opts.join (sourceCode.join "\n") opts.join))))))))

; Get corresponding output JavaScript path for source file
(def outputPath source base (extension ".js")
     (do (= basename (utils.baseFileName source yes useWinPathSep)
            srcDir   (path.dirname source)
            dir      (if (not opts.output)
                         srcDir
                         (elif (is source base)
                               opts.output)
                         (path.join opts.output (path.relative base srcDir))))
         (path.join dir (+ basename extension))))

; Write out JavaScript source file with compiled code. By default writes out in `cwd` as `.js` files with same name, but output dir can be customised with `--output`
(def writeJs base sourcePath js jsPath (do
  (= jsDir (path.dirname jsPath)
     js    js)
  (def compile
    (if opts.compile (do
      (if (<= js.length 0) (= js " "))
      (fs.writeFile jsPath js (fn err
        (if err (printLine err.message)))))))
  (fs.exists jsDir (fn itExists
    (if itExists (compile) (mkdirp jsDir compile))))))

; For prettier timeouts
(def wait milliseconds func
     (setTimeout func milliseconds))

; Options parser
(def parseOptions
  (= optionParser (new optparse.OptionParser switches banner)
     opts         (optionParser.parse (process.argv.slice 2))
     o            opts
     o.compile    (or o.compile (is o.output))
     o.run        (not o.compile)))


; Compile-time options to pass to compiler
(def compileOptions filename base
  (do (= answer (filename: filename))
      (if (not filename)
          answer
          (if base
              (= cwd    (process.cwd)
                 jsPath (outputPath filename base)
                 jsDir  (path.dirname jsPath)
                 answer (utils.merge answer
                   (jsPath:        jsPath
                    sourceRoot:    (path.relative jsDir cwd)
                    sourceFiles:   `(,(path.relative cwd, filename))
                    generatedFile: (utils.baseFileName jsPath no useWinPathSep))))
              (= answer (utils.merge answer
                (sourceRoot:    ""
                 sourceFiles:   `(,(utils.baseFileName filename no useWinPathSep))
                 generatedFile: (+ (utils.baseFileName filename yes useWinPathSep) ".js"))))))))

(def version
     (printLine (+ "jisp version " jisp.version)))
