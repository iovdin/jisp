; Converts string tokens into native JS objects
; Desugars syntax shortcuts:
  ; quote
  ; unquote
  ; spread
  ; get (.dot and ["bracket"] notation)
; Throws syntax errors

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Dependencies ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(= utils           (require "./utils")
   pr              utils.pr
   spr             utils.spr
   isList          utils.isList
   isAtom          utils.isAtom
   isaString       utils.isaString
   isNum           utils.isNum
   isRegex         utils.isRegex
   isIdentifier    utils.isIdentifier
   isString        utils.isString
   isKey           utils.isKey
   isDotName       utils.isDotName
   isBracketName   utils.isBracketName
   isBracketString utils.isBracketString
   isPropSyntax    utils.isPropSyntax)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utilities ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def printConditions conditions
  (do (for cond (concat conditions)
        (if (and (isa cond "function") (? cond.name))
            cond.name
            (elif (isList cond)
              (printConditions cond))
            (pr cond)))
      (.join "  ")))

(def maketest condition
     (if (is (typeof condition) "function")
         (fn tokens index (condition (get tokens (or index 0))))
         (elif (isRegex condition)
               (fn tokens index (condition.test (get tokens (or index 0)))))
         (elif (isAtom condition)
               (fn tokens index (is (get tokens (or index 0)) condition)))
         (elif (isList condition)  ; assume list of tests
               (fn tokens index
                   (if (for cond i condition
                            (if (not ((maketest cond) tokens (+ (or index 0) i)))
                                (return false)))
                       true)))
         (throw (Error (+ "can't test against " (pr condition))))))

(def demand tokens ...args
; lexes by the met condition and throws an error if none are met
     (do (= conditions `()
            modes      `())
         (while (> args.length 0)
                (do (= condition (args.shift)
                       mode      (args.shift))
                    (conditions.push condition)
                    (modes.push mode)
                    (= test (maketest condition))
                    (if (test tokens)
                        (return (lex tokens mode)))))
         ; todo print prettier error
         (= err (if (?! (car tokens))
                    (Error "unexpected end of input, probably missing ) ] }")
                    (Error (+
                      "unexpected " (pr (car tokens)) " in possible modes: "
                      (modes.join " | ") "\n\nTested against: " (printConditions conditions)
                      "\n\nTokens: " (spr (tokens.slice 0 10)) (if (> tokens.length 10) " ..." " ") ))))
         (throw err)))

(def expect tokens ...args
; lexes by the met condition and returns undefined if none are met
     (while (> args.length 0)
            (do (= condition (args.shift)
                   mode      (args.shift))
                (= test (maketest condition))
                (if (test tokens) (return (lex tokens mode))))
            undefined))

(def forbid tokens ...args
; throws an error if one of the conditions is met
  (for condition args
       (if ((maketest condition) tokens)
           (throw (Error (+ "unexpected " (pr (car tokens))))))))

(def nextProp tokens
  (expect tokens
    "["          "property"
    isPropSyntax "property"))

(def grabProperties tokens lexed
  (while (= prop (nextProp tokens))
    (if (?! lexed)
      (= lexed `("get" prop))
      (= lexed `("get" lexed prop)))
    lexed))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Main Lexer ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def lex tokens (mode "default")
  (switch mode
    (case "default"  ; should only happen once
      (do (= lexed `())
          (if (? (= prop (grabProperties tokens))) (lexed.push prop))
          (while (> tokens.length 0)
            (lexed.push
              (demand tokens
                `("("  ":"  ")") "emptyhash"
                `("(" isKey ":") "hash"
                "("              "list"
                "`"              "quote"
                ","              "unquote"
                "..."            "spread"
                "…"              "spread"
                isaString        "atom"
                undefined        "drop")))
          (grabProperties tokens lexed)))
    (case "list"
      (do (demand tokens "(" "drop")
          (= lexed `())
          (if (? (= prop (grabProperties tokens))) (lexed.push prop))
          (while (isnt (car tokens) ")")  ; EOF will be caught by demand
            (lexed.push
              (demand tokens
                `("("  ":"  ")") "emptyhash"
                `("(" isKey ":") "hash"
                "("              "list"
                "`"              "quote"
                ","              "unquote"
                "..."            "spread"
                "…"              "spread"
                isaString        "atom")))
          (demand tokens ")" "drop")
          (grabProperties tokens lexed)))
    (case "emptyhash"
      (do (demand tokens "(" "drop")
          (demand tokens ":" "drop")
          (demand tokens ")" "drop")
          (grabProperties tokens (:))))
    (case "hash"
      (do (= lexed (:))
          (demand tokens "(" "drop")
          (while (isnt (car tokens) ")")  ; EOF will be caught by demand
            (do (= key  (demand tokens isKey "key"))
                (demand tokens ":" "drop")
                (= prop (demand tokens
                   `("("  ":"  ")") "emptyhash"
                   `("(" isKey ":") "hash"
                   "("              "list"
                   "`"              "quote"
                   ","              "unquote"
                   isaString        "atom"))
                (= lexed[key] prop)))
          (demand tokens ")"  "drop")
          (grabProperties tokens lexed)))
    (case "property"
      (if (isDotName (car tokens))
          ; don't modify the .dot part whatsoever
          (demand tokens isDotName "drop")
          (elif (or (isBracketName   (car tokens))
                    (isBracketString (car tokens)))
                (do (demand tokens
                      isBracketName   "drop"
                      isBracketString "drop")
                    (.slice 1 -1)))
          (do (demand tokens "[" "drop")
              (= prop (demand tokens
                 "("          "list"
                 ","          "quote"
                 isIdentifier "atom"
                 isNum        "atom"
                 isString     "atom"))
              (demand tokens  "]" "drop")
              prop)))
    (case "quote"
      (do (demand tokens "`" "drop")
          (= lexed `("quote" ,(demand tokens
             `("("  ":"  ")") "emptyhash"
             `("(" isKey ":") "hash"
             "("              "list"
             "`"              "quote"
             ","              "unquote"
             isaString        "atom"))))
          (grabProperties tokens lexed))
    (case "unquote"
      (do (demand tokens "," "drop")
          `("unquote" ,(grabProperties tokens (demand tokens
            "("          "list"
            "`"          "quote"
            "..."        "spread"
            "…"          "spread"
            isIdentifier "atom")))))
    (case "spread"
      (do (demand tokens
            "..." "drop"
            "…"   "drop")
          `("spread" ,(grabProperties tokens (demand tokens
            "("          "list"
            "`"          "quote"
            isIdentifier "atom")))))
    (case "key"
      (do (= key (demand tokens isKey "drop"))
          (forbid "[" isPropSyntax)
          key))
    (case "atom"
      (grabProperties tokens (demand tokens isaString "drop")))
    (case "drop" (tokens.shift))
    (throw (Error (+ "unspecified lex mode: " mode)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Export ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(= module.exports lex)
